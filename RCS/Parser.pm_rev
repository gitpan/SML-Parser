head	1.7;
access;
symbols;
locks
	root:1.7; strict;
comment	@# @;


1.7
date	2004.05.19.14.46.10;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.13.12.55.51;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.13.11.55.34;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.13.11.01.50;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.13.11.01.36;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.10.19.00.42;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.30.00.46.44;	author root;	state Exp;
branches;
next	;


desc
@Simple Markup Language - parser
@


1.7
log
@*** empty log message ***
@
text
@### //////////////////////////////////////////////////////////////////////////
#
#	TOP
#

=head1 NAME

SML::Parser - SIMPLIFIED MARKUP LANGUAGE

=cut

#------------------------------------------------------
# 2004/03/28 0:51 - $Date: 2004/05/13 12:55:51 $
# (C) Daniel Peder & Infoset s.r.o., all rights reserved
# http://www.infoset.com, Daniel.Peder@@infoset.com
#------------------------------------------------------

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: package
#

	package SML::Parser;


### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: version
#

	use vars qw( $VERSION $VERSION_LABEL $REVISION $REVISION_DATETIME $REVISION_LABEL $PROG_LABEL );

	$VERSION           = '0.11';
	
	$REVISION          = (qw$Revision: 1.6 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/13 12:55:51 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.6 2004/05/13 12:55:51 root Exp root $';
	$VERSION_LABEL     = "$VERSION (rev. $REVISION $REVISION_DATETIME)";
	$PROG_LABEL        = __PACKAGE__." - ver. $VERSION_LABEL";

=pod

 $Revision: 1.6 $
 $Date: 2004/05/13 12:55:51 $

=cut


#### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: debug
#

	use vars qw( $DEBUG ); $DEBUG=0;
	

## //////////////////////////////////////////////////////////////////////////
#
#	SECTION: constants
#

	# use constant	name		=> 'value';
	

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: modules use
#

	require 5.005_62;

	use strict                  ;
	use warnings                ;
	

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: methods
#

=head1 METHODS

=over 4

=cut



=item	new

 $sml = SML::Parser->new();
 
=cut

### --------------------------------------------------------------------------
sub		new
### --------------------------------------------------------------------------
{
	my( $proto ) = @@_;
	bless {}, ref( $proto ) || $proto;
}

### ##########################################################################

=item	parse ( $str )

Parse HTML|XML like string source. No other rules, no checks.

Creates simple stream of 3 types of parsed items:

 - comment data:
 [ 'C', $comment_body ]
 
 - text data
 [ 'T', $text_body ]
 
 - element tag data
 [ 'E', $pi, $tag_name, $tag_body ]
 
Data are returned as ref to ARRAY of items described above.

=cut

### --------------------------------------------------------------------------
sub		parse
### --------------------------------------------------------------------------
{
	my( $self, $text_source )=@@_;

	my	$re_TagMark	= 		# matches the begin/opening of tag or comment
	qr{
		(?:
			<				#    - open bracket
			(!--)			# $1 - comment
		)
		|					# or
		(?:
			<				#    - open bracket
			([/!\?]*)		# $2 - processing instruction: '/', '!', '?', [ closing tag | special tags ]; note that special tags can't be paired with closing tag
			([\w\-\.\:]+)	# $3 - tagname, much more tolerant that the HTML/XML, for example, ':::' is valid tag name here
		)
	}xs;

	my	$re_TagBody	=		# matches the rest of tag body as continuation of previous $re_TagMark match
	qr{
		(.*?)>				# simply get end of tag
	}xs;

	my	$re_CommentBody	=	# matches the rest of comment body as continuation of previous $re_TagMark match
	qr{
		(.*?)-->			# simply get end of comment
	}xs;
	
	my	@@data;
	my	$prev_pos	= 0;
	my	$curr_pos	= 0;

	while( $text_source =~ /$re_TagMark/csgo )
	{
			$curr_pos	= pos( $text_source );
		my	$text	= substr( $text_source, $prev_pos, $curr_pos - length( $& ) - $prev_pos );
			$prev_pos	= $curr_pos;
		my	$cmnt	= $1;
		my	$pi		= $2; #$pi	= '' unless defined $pi;
		my	$tag	= $3; #$tag	= '' unless defined $tag;
		my	$body	= '';
		
		if( $DEBUG ){ ( my	$tmp_val	= $& ) =~ s{\s+}{ }gos; print "match: $tmp_val\n"; }
		
		if( $cmnt && scalar($text_source =~ /$re_CommentBody/csgo) ) # BUG:TODO:unclosed comments are treated as tags with pi & tagname undef!
		{
			# special 'comment' case
			$body = $1;
			push @@data, [ 'T', $text ] if length( $text );
			push @@data, [ 'C', $body ]; # [C]omment
			$DEBUG && print " = comment ($text) '$body' \n\n";
		}
		elsif( $text_source =~ /$re_TagBody/cgo )
		{
			$body = $1;
			push @@data, [ 'T', $text ] if length( $text );
			push @@data, [ 'E', $pi, $tag, $body ]; # [E]lement tag; note that body is the unparsed attributes part
			$DEBUG && print " = element ($text) '$pi' '$tag' '$body' \n\n";
		}
		else
		{
			push @@data, [ 'T', $text . $& ];
			$DEBUG && print " = text\n\n";
		}
		$prev_pos		= pos( $text_source );
	}
	my	$text = substr( $text_source, $prev_pos );
		push @@data, [ 'T', $text ] if length( $text );

	\@@data
}


### ##########################################################################

=item	parse_attributes ( $attr_string )

Parse body of the element same way as the HTML attributes.

=cut

### --------------------------------------------------------------------------
sub		parse_attributes
### --------------------------------------------------------------------------
{
	my( $self, $attr_string )=@@_;
	
	my	%attrs;
	
	# 1. extract quoted areas
	while( 1 )
	{
		my( $mixed, $quoted, $last );
		if( $attr_string =~ m{(.*?)(['"])(.*?)\2}cgos )
		{
			# $mixed =
			#	(1) single tokens 'some_attr, 
			#	(2) assigned tokens 'SomeAttr=notQuotedValue', 
			#	(3) any other garbage ' abc ===', ...
			#
			# $quoted = the value withing single or double quotes, eg: 
			#	" value within 'double quotes' " or 
			#	' double quote " within single quotes '
			#
			
			( $mixed, $quoted )	= ($1,$3);
		}
		else
		{
			
			if( my $pos = pos( $attr_string ))
			{
				$mixed	= substr( $attr_string, $pos );
			}
			else
			{
				$mixed = $attr_string;
			}
			$last = 1;
		}
		
		my(	$key, $val );
		foreach ( split '\s+', $mixed )
		{
			( $key, $val ) = ('*','');
			#debug# print "data: '$_'\n";
			
			next unless /\S/;
			if( /^([\w\.\-]+)(=(\S*))?$/ )
			{
				if( $2 )
				{
					( $key, $val ) = ($1,$3);
				}
				else
				{
					$key	= $_;
					$val	= 1;
				}
				
			}
			else
			{
				$key	= '*';
				$val	= $_;
			}
			#debug# print "values: ( $key, $val )\n";
			push @@{$attrs{$key}}, $val;
			push @@{$attrs{'='}}, [$key, $#{$attrs{$key}}];
		}
		if( $quoted )
		{
			if( !$val )
			{
				if( @@{$attrs{$key}} )
				{
					pop @@{$attrs{$key}} ;
					pop @@{$attrs{'='}}	;
				}
				push @@{$attrs{$key}}, $quoted;
				push @@{$attrs{'='}}, [$key, $#{$attrs{$key}}];
			}
			else
			{
				push @@{$attrs{'*'}}, $quoted;
				push @@{$attrs{'='}}, ['*', $#{$attrs{'*'}}];
			}
			#debug# print "( $key, $quoted )\n";
		}
		
		last if $last;
	}
	return \%attrs
}






=back

=cut


1;

__DATA__

__END__

### //////////////////////////////////////////////////////////////////////////
#
#	SECTION: TODO
#

=head1 TODO	

- rewrite some parts of code into methods and subclasses

=cut
@


1.6
log
@*** empty log message ***
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/05/13 11:55:34 $
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.5 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/13 11:55:34 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.5 2004/05/13 11:55:34 root Exp root $';
d43 2
a44 2
 $Revision: 1.5 $
 $Date: 2004/05/13 11:55:34 $
d130 1
a130 1
	my	$re_TagMark	= 
d136 1
a136 1
		|
d140 1
a140 1
			([\w\-\.\:]+)	# $3 - tagname
d144 1
a144 1
	my	$re_TagBody	=
d146 1
a146 2
		(.*?)>
		#>|([^<>]+)>
d149 1
a149 1
	my	$re_CommentBody	=
d170 1
a170 1
		if( $cmnt && scalar($text_source =~ /$re_CommentBody/csgo) )
d182 1
a182 1
			push @@data, [ 'E', $pi, $tag, $body ]; # call sub &output(_[qec]pi)?_<tagname>
@


1.5
log
@*** empty log message ***
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/05/13 11:01:50 $
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.4 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/13 11:01:50 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.4 2004/05/13 11:01:50 root Exp root $';
d43 2
a44 2
 $Revision: 1.4 $
 $Date: 2004/05/13 11:01:50 $
d292 1
a292 1
				push @@{$attrs{'='}}, [$key, $#{$attrs{'*'}}];
@


1.4
log
@*** empty log message ***
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/05/13 11:01:36 $
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.3 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/05/13 11:01:36 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.3 2004/05/13 11:01:36 root Exp root $';
d43 2
a44 2
 $Revision: 1.3 $
 $Date: 2004/05/13 11:01:36 $
d49 9
a57 1
### //////////////////////////////////////////////////////////////////////////
d149 1
d169 2
d175 1
d177 1
d184 1
d189 1
a189 1

@


1.3
log
@*** empty log message ***
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/04/10 19:00:42 $
d33 1
a33 1
	$VERSION           = '0.10';
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.2 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/04/10 19:00:42 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.2 2004/04/10 19:00:42 root Exp root $';
d43 2
a44 2
 $Revision: 1.2 $
 $Date: 2004/04/10 19:00:42 $
@


1.2
log
@parse_attributes
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/03/30 00:46:44 $
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.1 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/03/30 00:46:44 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.1 2004/03/30 00:46:44 root Exp root $';
d43 2
a44 2
 $Revision: 1.1 $
 $Date: 2004/03/30 00:46:44 $
d81 1
a81 1
=item new
d88 1
a88 1
sub new
d91 2
a92 1
	bless {};
d99 1
a99 1
Parse HTML|XML like string source. No rules, no checks.
d101 1
a101 1
Creates 3 types of parsed items stream:
d109 1
a109 1
 - tag element data
d131 1
a131 1
			([/!\?]*)		# $2 - processing instruction: '/', '!', '?', [ special tag | closing tag ]; note thet special tags don't have closing tag
d135 1
d261 1
d267 5
a271 1
				pop @@{$attrs{$key}} if @@{$attrs{$key}};
d273 1
d278 1
d303 11
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
# 2004/03/28 0:51 - $Date: 2004/03/30 00:46:36 $
d35 3
a37 3
	$REVISION          = (qw$Revision: 1.2 $)[1];
	$REVISION_DATETIME = join(' ',(qw$Date: 2004/03/30 00:46:36 $)[1,2]);
	$REVISION_LABEL    = '$Id: Parser.pm_rev 1.2 2004/03/30 00:46:36 root Exp root $';
d43 2
a44 2
 $Revision: 1.2 $
 $Date: 2004/03/30 00:46:36 $
d105 2
a106 2
 - string data
 [ 'S', $string_body ]
d108 2
a109 2
 - tag data
 [ 'T', $pi, $tag_name, $tag_body ]
d130 2
a131 2
			([/!]*)			# $2 - processing instruction: [ special tag | closing tag ]; note thet special tags don't have closing tag
			([\w\-\.\:]+)	# $3 - tagname (unless comment)
d133 1
a133 1
	}x;
d137 2
a138 1
	}x;
d142 1
a142 1
	}x;
d148 1
a148 1
	while( $text_source =~ /$re_TagMark/cgo )
d154 2
a155 2
		my	$pi		= $2; $pi	= '' unless defined $pi;
		my	$tag	= $3; $tag	= '' unless defined $tag;
d158 1
a158 1
		if( $cmnt )
d161 1
a161 1
			$body = $1 if $text_source =~ /$re_CommentBody/cgo;
d164 6
d172 2
a173 3
			$body = $1 if $text_source =~ /$re_TagBody/cgo;
			push @@data, [ 'S', $text ] if length( $text ); # [S]tring data
			push @@data, [ 'T', $pi, $tag, $body ]; # [T]ag data
d178 1
a178 1
		push @@data, [ 'S', $text ] if length( $text ); # [S]tring data
d182 97
@
